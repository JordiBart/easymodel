totalTestSteps=10;
SMTransposed = Transpose[SM];
RatesWJustDepVars = ReleaseHold[(Rates /. Join[SubsFormVars, ParVarVals, ParArrayInVars])]/.Join[ParNumVals, IndVarVals];
DepVarsInitSubs = Table[DepVars[[i]] -> IntegerPart[InitCondDepVars[[i, 2]]*cellSize], {i,Length[DepVars]}];
DepVarsInitVals = DepVars /. DepVarsInitSubs;
RatesInitVals = RatesWJustDepVars /. DepVarsInitSubs;
stDepVarsVals = DepVarsInitVals;
stRatesVals = RatesInitVals;
stDepVarsList = {};
AppendTo[stDepVarsList, stDepVarsVals];
isModelOkForStochasticsSim=False;

Catch[
numMolIndVar=IntegerPart[Apply[Plus,IndVarVals[[All, 2]]]*cellSize];
If[numMolIndVar > 0 && (numMolIndVar < 4 || numMolIndVar >= 1500000),
	Throw["sum of indvarvals"];
];
If[Select[DepVarsInitVals, (# < 0) &] != {} || Select[RatesInitVals, (# < 0) &] != {},
	Throw["init depvarvals or ratevals"];
];
isSimError=False;
For[testSteps=0, testSteps<totalTestSteps, testSteps++,
	fireCandidates=Table[i, {i, numReactions}];
	While[Length[fireCandidates] > 0,
		(*select new random reaction*)
		roundRatesVals = Extract[stRatesVals, Partition[fireCandidates,1]];
		roundSumRatesVals=Apply[Plus,roundRatesVals];
		roundRandomSumRates = RandomReal[roundSumRatesVals];
		curSum=0;
		For[posInFireCandidates=1, posInFireCandidates < Length[roundRatesVals], posInFireCandidates++,
			curSum += roundRatesVals[[posInFireCandidates]];
			If[curSum > roundRandomSumRates,
				Break[];
			];
		];
		fireReaction=fireCandidates[[posInFireCandidates]];
		
		stNewDepVarsVals = stDepVarsVals + SMTransposed[[fireReaction]];
		stNewDepVarsValsSubs = Table[DepVars[[i]]->stNewDepVarsVals[[i]], {i,Length[DepVars]}];
		stNewRatesVals = Table[Check[RatesWJustDepVars[[i]]/.stNewDepVarsValsSubs, RatesInitVals[[i]]], {i, Length[RatesWJustDepVars]}];
		
		If[Select[stNewDepVarsVals, (# < 0) &] == {} && Select[stNewRatesVals, (# < 0) &] == {},
			(*step validated, update values*)
			stDepVarsVals = stNewDepVarsVals;
			stRatesVals = stNewRatesVals;
			AppendTo[stDepVarsList, stDepVarsVals];
			Break[];
		,
			(*delete current fire candidate and proceed*)
			fireCandidates=Delete[fireCandidates, posInFireCandidates];
		];
	];
	If[Length[fireCandidates] == 0,
		isSimError=True;
		Break[];
	];
];
(*check if system remains constant over time*)
If[isSimError==False,
	For[i=1, i<Length[stDepVarsList],i++,
		If[stDepVarsList[[i]] != stDepVarsList[[i+1]],
			isModelOkForStochasticsSim=True;
			Break[];
		];
	];
];
]