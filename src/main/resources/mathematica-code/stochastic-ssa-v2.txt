Catch[
(*Stochastic Simulation Algorithm SSA*)
(*parameters*)
stMaxStepTries = 300;
stTauDivisor = 1;

(*functions*)
fStAddDepVarStateToInternalList = Function[timeToStamp,
	AppendTo[intTimeVals, timeToStamp];
	AppendTo[intDepVals, stDepVarsVals];
];
fGenPlotVals=Function[
	plotDepVals= {}; plotTimeVals={};
	If[Length[intTimeVals] == 0 || Last[intTimeVals] <= tf,
		Return["error"];
	];
	prevIntTimePos=1;
	prevIntTime=intTimeVals[[prevIntTimePos]];
	nextIntTime=intTimeVals[[prevIntTimePos+1]];
	For[plotTime = ti, plotTime <= tf, plotTime += tStep,
		(*update int time*)
		While[plotTime>=nextIntTime,
			prevIntTimePos++;
			prevIntTime=intTimeVals[[prevIntTimePos]];
			nextIntTime=intTimeVals[[prevIntTimePos+1]];
		];
		(*update plot time*)
		AppendTo[plotTimeVals, plotTime];
		(*update plot depvarvals*)
		diffPrev=plotTime-prevIntTime;
		diffNext=nextIntTime-plotTime;
		If[diffPrev<=diffNext,
			AppendTo[plotDepVals, intDepVals[[prevIntTimePos]]];
		,
			AppendTo[plotDepVals, intDepVals[[prevIntTimePos+1]]];
		];
	];
];

(*MAIN CODE*)
cellSizeInv=1/cellSize;
SMTransposed = Transpose[SM];
RatesWJustDepVars = ReleaseHold[(Rates /. Join[SubsFormVars, ParVarVals, ParArrayInVars])]/.Join[ParNumVals, IndVarVals];
DepVarsInitSubs = Table[DepVars[[i]] -> IntegerPart[InitCondDepVars[[i, 2]]*cellSize], {i,Length[DepVars]}];
DepVarsInitVals = DepVars /. DepVarsInitSubs;
RatesInitVals = RatesWJustDepVars /. DepVarsInitSubs;
If[Select[DepVarsInitVals, (# < 0) &] != {} || Select[RatesInitVals, (# < 0) &] != {},
	Throw["init depvarvals or ratevals"];
];
stInternalLists = Table[{}, {i, Length[DepVars]}];
stPlotLists = Table[{}, {i, Length[DepVars]}];
For[stRep = 1, stRep <= stochasticReps, stRep++,
	Print["MSG::Calculating iteration " <> ToString[stRep] <> "/" <> ToString[stochasticReps] <> "..."];
	intTimeVals = {};	intDepVals = {};
	plotTimeVals = {};	plotDepVals = {};
	stTime = ti;
	stNumTries=0;

	stDepVarsVals = DepVarsInitVals;
	stRatesVals = RatesInitVals;
	
	fStAddDepVarStateToInternalList[stTime];
	While[stTime <= tf,
		(*select new random reaction*)
		sumRates=Apply[Plus, stRatesVals];
		randomSumRates = RandomReal[sumRates];
		nextReaction = Position[Sort[Join[{randomSumRates}, Accumulate[stRatesVals]]], randomSumRates][[1,1]];
		
		stNewDepVarsVals = stDepVarsVals + SMTransposed[[nextReaction]];
		(*stNewDepVarsConc = stNewDepVarsVals*cellSizeInv;*)
		stNewDepVarValsSubsZeroNegativeChecked = Table[DepVars[[i]] -> If[stNewDepVarsVals[[i]] > 0, stNewDepVarsVals[[i]], DepVarsInitVals[[i]]], {i, Length[DepVars]}];
		stNewRatesVals = Re[RatesWJustDepVars /. stNewDepVarValsSubsZeroNegativeChecked];
		If[Select[stNewDepVarsVals, (# < 0) &] == {} && Select[stNewRatesVals, (# < 0) &] == {},
			(*step validated, update values*)
			stNumTries=0;
			stDepVarsVals = stNewDepVarsVals;
			stRatesVals = stNewRatesVals;
			tau=(1/(sumRates*stTauDivisor))*Log[1/RandomReal[{0.001,0.999}]];
			If[tau==0,"noooo"];
			stTime += (1/(sumRates*stTauDivisor))*Log[1/RandomReal[{0.001,0.999}]];
			fStAddDepVarStateToInternalList[stTime];
		,
			If[stNumTries>stMaxStepTries,
				(*Print["max tries reached"];*)
				stNumTries=0;
				tau=(1/(sumRates*stTauDivisor))*Log[1/RandomReal[{0.001,0.999}]];
				If[tau==0,"noooo"];
				stTime += (1/(sumRates*stTauDivisor))*Log[1/RandomReal[{0.001,0.999}]];
				fStAddDepVarStateToInternalList[stTime];
			,
				stNumTries++;
			];
		];
	];
	(*append internal vals to general list*)
	For[i = 1, i <= Length[DepVars], i++,
		AppendTo[stInternalLists[[i]], TimeSeries[Transpose[intDepVals][[i]], {intTimeVals}]];
	];
	
	fGenPlotVals[];
	(*append plot vals to general list*)
	For[i = 1, i <= Length[DepVars], i++,
		AppendTo[stPlotLists[[i]], TimeSeries[Transpose[plotDepVals][[i]], {plotTimeVals}]];
	];
];
]