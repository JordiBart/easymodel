If[!isLogarithmic,
	scanStepSize=Abs[endVal-beginVal]/numIntervals;
	ParamScanVals = Table[(paramName->_)->(paramName->x),{x,beginVal,endVal,scanStepSize}];
,
	lBeginVal=If[Log10@Abs@beginVal < minLogVal, minLogVal, Log10@Abs@beginVal];
	lEndVal=If[Log10@Abs@endVal < minLogVal, minLogVal, Log10@Abs@endVal];
	If[lBeginVal>lEndVal,
		aux=lBeginVal;
		lBeginVal=lEndVal;
		lEndVal=aux;
	];
	lDiff=Abs[lEndVal-lBeginVal];
	originalSign=If[beginVal < 0 || endVal < 0,-1,1];
	ParamScanVals=Table[(paramName->_)->(paramName->originalSign*(10^(lBeginVal+x))),{x,0, lDiff, lDiff/numIntervals}];
];
Print["GRCAP::",paramType,"=",paramName," ; Scanning Range=[",ToStringNumber@beginVal,", ",ToStringNumber@endVal,"] ; #Intervals=",numIntervals," ; Step Size=",If[!isLogarithmic,ToStringNumber@scanStepSize,"Logarithmic"]];

stablePoints = Table[{}, {i,Length@DepVars}];
unstablePoints = Table[{}, {i,Length@DepVars}];
SetSharedVariable[stablePoints,unstablePoints];
WaitAll[Table[ParallelSubmit[{RateEqsWithT,ParNumVals,IndVarVals,ParamScanVals,iScan,DepVars,InitCondDepVars,ti,tf,DepVarsWithT,thresholdCondition,EqsToSolve,Jac},
	(*steady-state.txt*)
	fSteadyState := Function[{isPrint},
		ssri = 10^-32;
		ssrf = 1;
		maxTries=2;
		isSteadyState = False;
		SSSol=FindRoot[RateEqsAllSubs == 0, Table[{DepVarsWithT[[k1]], Random[Real, {ssri,ssrf}]}, {k1, 1, Length[DepVarsWithT]}]];
		If[Select[RateEqsAllSubs /. SSSol, (Abs[#] > thresholdCondition) &] == {},
			isSteadyState=True;
		,(*else*)
			newTime = 500000;
			timesTried = 0;
			While[timesTried < maxTries && !isSteadyState,
				SSSolN = NDSolve[EqsToSolve, DepVars, {t, newTime-1, newTime+1}];
				If[Select[Flatten[RateEqsAllSubs /. SSSolN /. {t->newTime}], (Abs[#] > thresholdCondition) &] == {},
					SSSol = FindRoot[RateEqsAllSubs == 0, Table[{DepVarsWithT[[k1]], (DepVars[[k1]][newTime] /. SSSolN)[[1]]}, {k1, 1, Length[DepVarsWithT]}]];
					If[Select[RateEqsAllSubs /. SSSol, (Abs[#] > thresholdCondition) &] == {},
						isSteadyState = True;
					];
				];
				newTime = newTime*2;
				timesTried++;
			];
		];
		(*result: typeSS and SSSol*)
		If[isSteadyState,
			If[Select[Re[Eigenvalues[Jac /. Join[ParNumVals, IndVarVals, SSSol]]], (# >= 0) &] != {},
				If[isPrint,Print["MSG::WARNING: Unstable Steady State!"];];
				typeSS="unstable";
			,
				If[isPrint,Print["MSG::Stable Steady State"];];
				typeSS="stable";
			];
		,
			If[isPrint,Print["MSG::System doesn't reach Steady State"];];
			typeSS="notFound";
		];
	];
	(*end steady-state.txt*)
	RateEqsAllSubs = RateEqsWithT /. (Join[ParNumVals, IndVarVals] /. ParamScanVals[[iScan]]);
	fSteadyState[False];
	Switch[typeSS
	,"stable",
		For[i = 1, i <= Length@DepVars, i++, AppendTo[stablePoints[[i]], {ParamScanVals[[iScan, 2, 2]], SSSol[[i, 2]]}];];
	,"unstable",
		For[i = 1, i <= Length@DepVars, i++, AppendTo[unstablePoints[[i]], {ParamScanVals[[iScan, 2, 2]], SSSol[[i, 2]]}];];
	];
],{iScan,Length@ParamScanVals}]];
(*check if there are any results*)
isEmptyResults=True;
For[i = 1, i <= Length@stablePoints, i++,
	If[Length[stablePoints[[i]]] == 0,
		stablePoints[[i]] = {Null};
	,
		isEmptyResults=False;
	];
];
For[i = 1, i <= Length@unstablePoints, i++,
	If[Length[unstablePoints[[i]]] == 0,
		unstablePoints[[i]] = {Null};
	,
		isEmptyResults=False;
	];
];
If[isEmptyResults,
	Print["No Steady States found for ",paramName];
]