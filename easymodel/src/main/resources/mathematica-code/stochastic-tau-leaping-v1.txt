(*TAU-LEAPING STOCHASTIC*)
Catch[
(*Tau-leaping parameters*)
stEpsilon=0.03;
minFiresToDeemReactionAsNonCritical = 10;
minimumTauMultiple=10;
abandonTauLeapingTotalFires=100;

(*Tau-leaping functions*)
fStAddDepVarStateToInternalList = Function[timeToStamp,
	AppendTo[intTimeVals, timeToStamp];
	AppendTo[intDepVals, Table[StDepVarVals[[i, 2]], {i, 1, Length[StDepVarVals]}]];
];
fStAddFirstDepVarStateToPlotList = Function[timeToStamp,
	AppendTo[plotTimeVals, nextTStep];
	AppendTo[plotDepVals, Last[intDepVals]];
	nextTStep += tStep;
];
fStAddDepVarStateToPlotList = Function[timeToStamp,
	(*plot values interpolation*)
	startDepVals=intDepVals[[-2]];
	endDepVals=intDepVals[[-1]];
	startTime=nextTStep;
	endTime=timeToStamp;
	diffDepVals=intDepVals[[-1]]-intDepVals[[-2]];
	diffTime=timeToStamp-nextTStep;
	While[timeToStamp >= nextTStep && nextTStep <= tf,
		timePercentage=(nextTStep-startTime)/diffTime;
		AppendTo[plotTimeVals, nextTStep];
		AppendTo[plotDepVals, IntegerPart[startDepVals+(timePercentage*diffDepVals)]];
		nextTStep += tStep;
	];
];
fStCheckAndUpdateDepVarState = Function[
	Ctemp = newDepVarsValues*multInvToCellSize;
	StDepVarsSubsZeroNegativeChecked = Table[DepVarsInitConcVals[[i, 1]] -> If[Ctemp[[i]] <= 0, DepVarsInitConcVals[[i, 2]], Ctemp[[i]]], {i, 1, Length[DepVarsInitConcVals]}];
	newStRatesValues = Re[(RatesWDepVars /. StDepVarsSubsZeroNegativeChecked)];
	If[Select[newDepVarsValues, (# < 0) &] == {} && Select[newStRatesValues, (# < 0) &] == {},
		(*step validated, update values*)
		StDepVarVals = Table[StDepVarVals[[i, 1]] -> newDepVarsValues[[i]], {i, 1, Length[StDepVarVals]}];
		StRatesValues = Re[newStRatesValues];
		True
	,
		False
	]
];

(*precode*)
multToCellSize = 602.41;
multInvToCellSize = 1/multToCellSize;
SMTransposed = Transpose[SM];
RatesAllSubs = ReleaseHold[(Rates /. Join[SubsFormVars, ParVarVals, ParArrayInVars])];
(*ReactantsReactionLevel*)
ReactantsReactionLevel = {};
For[j = 1, j <= Length[SMTransposed], j++,
	smReaction = SMTransposed[[j]];
	dvPos = Flatten[Position[smReaction, _?Negative]];
	auxList = {};
	For[i = 1, i <= Length[dvPos], i++,
		rExp = Exponent[RatesAllSubs[[j]], DepVars[[dvPos[[i]]]]];
		If[rExp > 0,
			AppendTo[auxList, Association["name" -> DepVars[[dvPos[[i]]]], order -> rExp, "stCoef" -> Abs[smReaction[[dvPos[[i]]]]]]];
		];
	];
	AppendTo[ReactantsReactionLevel, auxList];
];
(*ReactantsModelLevel*)

(*other initialization*)
IndVarsInitConc = IndVars /. IndVarVals;
IndVarsConC = Table[IndVarVals[[i, 2]], {i, 1, Length[IndVarVals]}];
IndVarsInitConcInt = IntegerPart[IndVarsConC*multToCellSize];
DepVarsInitConcVals = Table[DepVars[[i]] -> InitCondDepVars[[i, 2]], {i,1,Length[DepVars]}];
RatesWDepVars = ReleaseHold[Rates/. Join[SubsFormVars,ParVarVals,ParArrayInVars]] /. Join[ParNumVals, IndVarVals];
stInternalLists = Table[{}, {i, 1, Length[DepVars]}];
stPlotLists = Table[{}, {i, 1, Length[DepVars]}];
DepVarsInitConcInt = IntegerPart[(DepVars /. DepVarsInitConcVals)*multToCellSize];
(*MAIN CODE*)
For[stRep = 1, stRep <= stochasticReps, stRep++,
	Print["MSG::Calculating iteration " <> ToString[stRep] <> "/" <> ToString[stochasticReps] <> "..."];
	intTimeVals = {};
	intDepVals = {};
	
	StDepVarVals = Table[DepVars[[i]] -> DepVarsInitConcInt[[i]], {i, 1, Length[DepVars]}];
	StRatesValues = RatesWDepVars /. StDepVarVals;
	
	plotTimeVals = {};
	plotDepVals = {};
	nextTStep = ti;
	stTime = ti;
	fStAddDepVarStateToInternalList[ti];
	fStAddFirstDepVarStateToPlotList[ti];
	abandonTLFiresCount=abandonTauLeapingTotalFires;
	While[stTime < tf,
		tauToUse="error";
		isAdvanceStSim=True;
		sumStRatesValues = Apply[Plus, StRatesValues];

		If[abandonTLFiresCount < abandonTauLeapingTotalFires,
			abandonTLFiresCount++;
			
			(*classic SSA Gillespie*)
			tauToUse=(1/sumStRatesValues)*Log[1/RandomReal[{0.0001, 0.9999}]];
			weightedStRatesValues = Accumulate[StRatesValues];
			randomReaction = RandomReal[Re[sumStRatesValues]];
			nextReaction = Position[Sort[Join[{randomReaction}, weightedStRatesValues]], randomReaction][[1]][[1]];	
			newDepVarsValues = Table[StDepVarVals[[i, 2]], {i, Length[StDepVarVals]}] + SMTransposed[[nextReaction]];
			fStCheckAndUpdateDepVarState[];
		,
			(*try tau leaping*)
			(*step1 get criticalReactions and nonCriticalReactions*)
			Print["step1"];
			criticalReactions = {};
			nonCriticalReactions = {};
			For[j = 1, j <= numReactions, j++,
				If[StRatesValues[[j]]>0,
					minVal = minFiresToDeemReactionAsNonCritical;
					For[i = 1, i <= numDepVars, i++,
						If[SM[[i]][[j]] < 0,
							flVal = Floor[StDepVarVals[[i]][[2]]/Abs[SM[[i]][[j]]]];
							(*Print[flVal];*)
							If[flVal < minVal,
								minVal = flVal;
							];
						];
					];
					If[minVal < minFiresToDeemReactionAsNonCritical,
						AppendTo[criticalReactions, j];
					,
						AppendTo[nonCriticalReactions, j];
					];
				];
			];
			Print["step2"];
			(*step2 get Tau1*)
			If[Length[nonCriticalReactions] == 0,
				Print["no nonCriticalReactions"];
				tau1NonCriticalReactions=Infinity;
			,
				(*get supplementary values for tau1*)
				meanTau1=0;
				varianceTau1=0;
				For[j = 1, j <= Length[nonCriticalReactions], j++,
					curReaction=nonCriticalReactions[[j]];
					curReactants=ReactantsReactionLevel[[curReaction]];
					For[i = 1, i <= Length[curReactants], i++,
						curReactant=curReactants[[i]];
						meanTau1+=curReactant["stCoef"]*StRatesValues[[curReaction]];
						varianceTau1+=(curReactant["stCoef"]^2)*StRatesValues[[curReaction]];
					];
				];
				(*calculate tau1 if possible*)
				tau1NonCriticalReactions=Infinity;
				For[j = 1, j <= Length[nonCriticalReactions], j++,
					curReaction=nonCriticalReactions[[j]];
					curReactantsRL=ReactantsReactionLevel[[curReaction]];
					For[i = 1, i <= Length[curReactantsRL], i++,
						curReactantRL=curReactantsRL[[i]];
						For[i2 = 1, i2 <= Length[ReactantsModelLevel], i2++,
							curReactantML=ReactantsModelLevel[[i2]];
							If[curReactantRL["name"]==curReactantML["name"],
								reactantPositionInDepVars=First[First[Position[DepVars,curReactantML["name"]]]];
								curReactantNumMol=StDepVarVals[[reactantPositionInDepVars]][[2]];
								auxTau1=Max[(stEpsilon*curReactantNumMol)/(curReactantML["gFunction"]),1];
								tauMinValue=Min[(auxTau1/Abs[meanTau1]),((auxTau1^2)/varianceTau1)];
								prevTau1=tau1NonCriticalReactions;
								tau1NonCriticalReactions=Min[prevTau1,tauMinValue];
							];
						];
					];
				];
			];
			While[True,
				(*step3 check if Tau1 is valid*)
				Print["step3 "<>ToString[N[tau1NonCriticalReactions]]<>" "<>ToString[N[minimumTauMultiple/sumStRatesValues]]];
				If[tau1NonCriticalReactions < minimumTauMultiple/sumStRatesValues,
					abandonTLFiresCount=0;
					isAdvanceStSim=False;
					Print["going ssa"];
					Break[];
				,
					(*step4 get Tau2*)
					Print["step4"];
					If[Length[criticalReactions]>0,
						critSumStRatesValues=Apply[Plus,Extract[StRatesValues,Partition[criticalReactions,1]]];
						tau2CriticalReactions=RandomVariate[ExponentialDistribution[1/critSumStRatesValues]];
					,
						tau2CriticalReactions=Infinity;
					];
					Print["tau1 "<>ToString[tau1NonCriticalReactions]];
					Print["tau2 "<>ToString[tau2CriticalReactions]];
					(*step 4.5*)
					If[tau1NonCriticalReactions==Infinity && tau2CriticalReactions==Infinity,
						abandonTLFiresCount=0;
						isAdvanceStSim=False;
						Print["going ssa tau1=tau2=infinity"];
						Break[];
					];
					(*step5 select Tau1 or Tau2*)
					critNextReactionToFire=-1;
					If[tau1NonCriticalReactions<tau2CriticalReactions,
						(*5a*)
						tauToUse=tau1NonCriticalReactions;
					,
						(*5b*)
						tauToUse=tau2CriticalReactions;
						(*select a random critical reaction to be fired*)
						critStRatesValues=Extract[StRatesValues,Partition[criticalReactions,1]];
						critWeightedStRatesValues = Accumulate[critStRatesValues];
						critRandomReaction = RandomReal[Re[critSumStRatesValues]];
						critNextReactionToFire = criticalReactions[[Position[Sort[Join[{critRandomReaction}, critWeightedStRatesValues]], critRandomReaction][[1]][[1]]]];
					];
					(*get reactionFirings*)
					reactionFirings={};
					For[j = 1, j <= numReactions, j++,
						If[MemberQ[criticalReactions,j],
							If[critNextReactionToFire==j,
								AppendTo[reactionFirings, 1];
							,
								AppendTo[reactionFirings, 0];
							];
						,
							AppendTo[reactionFirings, RandomVariate[PoissonDistribution[StRatesValues[[j]]*tauToUse]]];
						];
					];
					newDepVarsValues = Table[StDepVarVals[[i, 2]], {i, Length[StDepVarVals]}];
					For[j = 1, j <= numReactions, j++,
						newDepVarsValues += reactionFirings[[j]] * SMTransposed[[j]];
					];
					
					(*step 6. check there is no new negative depvar concentration or rate*)
					stBool=fStCheckAndUpdateDepVarState[];
					Print["bool "<>ToString[stBool]];
					If[stBool,
						Print["tau leap done of "<>ToString[tauToUse]];
						Break[];
					,
						If[tau1NonCriticalReactions==Infinity,
							abandonTLFiresCount=0;
							isAdvanceStSim=False;
							Print["going ssa"];
							Break[];
						];
						Print["halving "<>ToString[tau1NonCriticalReactions]];
						tau1NonCriticalReactions *= 0.5;
						(*goto step3 with While[]*)
					];
				];
			];
		];
		If[isAdvanceStSim,
			stTime += tauToUse;
			fStAddDepVarStateToInternalList[stTime];
			fStAddDepVarStateToPlotList[stTime];
		];
	];
	(*generate timeseries for plots*)
	For[i = 1, i <= Length[DepVars], i++,
		AppendTo[stInternalLists[[i]], TimeSeries[Transpose[intDepVals][[i]], {intTimeVals}]];
	];
	For[i = 1, i <= Length[DepVars], i++,
		AppendTo[stPlotLists[[i]], TimeSeries[Transpose[plotDepVals][[i]], {plotTimeVals}]];
	];
];
]