(*Stochastic Simulation Algorithm SSA*)
(*parameters*)

(*functions*)
fStAddDepVarStateToInternalList = Function[timeToStamp,
	AppendTo[intTimeVals, timeToStamp];
	AppendTo[intDepVals, stDepVarsVals];
];
fGenPlotVals=Function[
	plotDepVals= {}; plotTimeVals={};
	If[Length[intTimeVals] == 0 || Last[intTimeVals] <= tf,
		Return["error"];
	];
	prevIntTimePos=1;
	prevIntTime=intTimeVals[[prevIntTimePos]];
	nextIntTime=intTimeVals[[prevIntTimePos+1]];
	For[plotTime = ti, plotTime <= tf, plotTime += tStep,
		fUpdateProgressBar[plotTime,2];
		(*update int time*)
		While[plotTime>=nextIntTime,
			prevIntTimePos++;
			prevIntTime=intTimeVals[[prevIntTimePos]];
			nextIntTime=intTimeVals[[prevIntTimePos+1]];
		];
		(*update plot time*)
		AppendTo[plotTimeVals, plotTime];
		(*update plot depvarvals*)
		diffPrev=plotTime-prevIntTime;
		diffNext=nextIntTime-plotTime;
		If[diffPrev<=diffNext,
			AppendTo[plotDepVals, intDepVals[[prevIntTimePos]]];
		,
			AppendTo[plotDepVals, intDepVals[[prevIntTimePos+1]]];
		];
	];
];
fUpdateProgressBar=Function[{curProgressAbs, stage},
	tryProgress = Round[(curProgressAbs/progressStages[[stage]])*(1/Length[progressStages])+((stage-1)/Length[progressStages]), progressIncrement];
	If[tryProgress >= curProgress+progressIncrement,
		curProgress = tryProgress;
		Print["PGS::",stRep,":",curProgress];
	];
];
fFillProgressBar=Function[Print["PGS::",stRep,":1"];];

(*MAIN CODE*)
cellSizeInv=1/cellSize;
SMTransposed = Transpose[SM];
RatesWJustDepVars = ReleaseHold[(Rates /. Join[SubsFormVars, ParVarVals, ParArrayInVars])]/.Join[ParNumVals, IndVarVals];
DepVarsInitSubs = Table[DepVars[[i]] -> IntegerPart[InitCondDepVars[[i, 2]]*cellSize], {i,Length[DepVars]}];
DepVarsInitVals = DepVars /. DepVarsInitSubs;
RatesInitVals = RatesWJustDepVars /. DepVarsInitSubs;
progressStages = {tf-ti,tf-ti};
progressIncrement = 0.05;

Catch[
numMolIndVar=IntegerPart[Apply[Plus,IndVarVals[[All, 2]]]*cellSize];
If[numMolIndVar > 0 && (numMolIndVar < 4 || numMolIndVar >= 1500000),
	Throw["sum of indvarvals"];
];
If[Select[DepVarsInitVals, (# < 0) &] != {} || Select[RatesInitVals, (# < 0) &] != {},
	Throw["init depvarvals or ratevals"];
];
stInternalLists = Table[{}, {i, Length[DepVars]}];
stPlotLists = Table[{}, {i, Length[DepVars]}];
For[stRep = 1, stRep <= stochasticReps, stRep++,
	intTimeVals = {};	intDepVals = {};
	plotTimeVals = {};	plotDepVals = {};

	stDepVarsVals = DepVarsInitVals;
	stRatesVals = RatesInitVals;
	
	stTime = ti;
	fStAddDepVarStateToInternalList[stTime];
	curProgress=0;
	While[stTime <= tf,
		fUpdateProgressBar[stTime,1];
		fireCandidates=Table[i, {i, numReactions}];
		stSumRatesVals=Apply[Plus, stRatesVals];
		While[Length[fireCandidates] > 0,
			(*select new random reaction*)
			roundRatesVals = Extract[stRatesVals, Partition[fireCandidates,1]];
			randomRoundSumRates = RandomReal[Apply[Plus,roundRatesVals]];
			curSum=0;
			For[posInFireCandidates=1, posInFireCandidates < Length[roundRatesVals], posInFireCandidates++,
				curSum += roundRatesVals[[posInFireCandidates]];
				If[curSum > randomRoundSumRates,
					Break[];
				];
			];
			fireReaction=fireCandidates[[posInFireCandidates]];
			
			stNewDepVarsVals = stDepVarsVals + SMTransposed[[fireReaction]];
			stNewDepVarsValsSubs = Table[DepVars[[i]]->stNewDepVarsVals[[i]], {i,Length[DepVars]}];
			stNewRatesVals = Table[Check[RatesWJustDepVars[[i]]/.stNewDepVarsValsSubs, RatesInitVals[[i]]], {i, Length[RatesWJustDepVars]}];
			
			If[Select[stNewDepVarsVals, (# < 0) &] == {} && Select[stNewRatesVals, (# < 0) &] == {},
				(*step validated, update values*)
				stDepVarsVals = stNewDepVarsVals;
				stRatesVals = stNewRatesVals;
				stTime += (1/stSumRatesVals)*Log[1/RandomReal[{0.001,0.999}]];
				fStAddDepVarStateToInternalList[stTime];
				Break[];
			,
				(*delete current fire candidate and proceed*)
				fireCandidates=Delete[fireCandidates, posInFireCandidates];
			];
		];
		If[Length[fireCandidates] == 0,
			(*cannot continue simulation, fill until the end*)
			While[stTime <= tf,
				stTime += (1/stSumRatesVals)*Log[1/RandomReal[{0.001,0.999}]];
				fStAddDepVarStateToInternalList[stTime];
			];
			Break[];
		];
	];
	(*append internal vals to general list*)
	For[i = 1, i <= Length[DepVars], i++,
		AppendTo[stInternalLists[[i]], TimeSeries[Transpose[intDepVals][[i]], {intTimeVals}]];
	];
	
	fGenPlotVals[];
	(*append plot vals to general list*)
	For[i = 1, i <= Length[DepVars], i++,
		AppendTo[stPlotLists[[i]], TimeSeries[Transpose[plotDepVals][[i]], {plotTimeVals}]];
	];
	fFillProgressBar[];
];
]