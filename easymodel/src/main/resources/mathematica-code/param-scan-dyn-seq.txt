If[!isLogarithmic,
	scanStepSize=Abs[endVal-beginVal]/numIntervals;
	ParamScanVals = Table[(paramName->_)->(paramName->x),{x,beginVal,endVal,scanStepSize}];
,
	lBeginVal=If[Log10@Abs@beginVal < minLogVal, minLogVal, Log10@Abs@beginVal];
	lEndVal=If[Log10@Abs@endVal < minLogVal, minLogVal, Log10@Abs@endVal];
	If[lBeginVal>lEndVal,
		aux=lBeginVal;
		lBeginVal=lEndVal;
		lEndVal=aux;
	];
	lDiff=Abs[lEndVal-lBeginVal];
	originalSign=If[beginVal < 0 || endVal < 0,-1,1];
	ParamScanVals=Table[(paramName->_)->(paramName->originalSign*(10^(lBeginVal+x))),{x,0, lDiff, lDiff/numIntervals}];
];
Print["GRCAP::",paramType,"=",paramName," ; Scanning Range=[",ToStringNumber@beginVal,", ",ToStringNumber@endVal,"] ; #Intervals=",numIntervals," ; Step Size=",If[!isLogarithmic,ToStringNumber@scanStepSize,"Logarithmic"]];

solsList={};
For[iScan=1, iScan <= Length@ParamScanVals, iScan++,
	RateEqsAllSubs = RateEqsWithT /. (Join[ParNumVals, IndVarVals] /. ParamScanVals[[iScan]]);
	EqsToSolve = Join[Table[DepVars[[i]]'[t] == RateEqsAllSubs[[i]], {i, Length[DepVars]}], InitCondDepVars];
	AppendTo[solsList, First@NDSolve[EqsToSolve, DepVars, {t, ti, tf}]];
]